---

- name: Client Configuration
  community.general.keycloak_client:
    auth_keycloak_url: "{{ nfc_pb_keycloak_auth_keycloak_url }}"
    auth_realm: "{{ nfc_pb_keycloak_auth_realm }}"
    auth_username: "{{ nfc_pb_keycloak_auth_username }}"
    auth_password: "{{ nfc_pb_keycloak_auth_password }}"
    validate_certs: "{{ nfc_pb_keycloak_validate_certs | default(true) }}"

    state: "{{ keycloak_client.state | default('present') }}"
        # description:
        #     - State of the client
        #     - On V(present), the client will be created (or updated if it exists already).
        #     - On V(absent), the client will be removed if it exists
        # choices: ['present', 'absent']
        # default: 'present'
        # type: str

    realm: "{{ keycloak_realm.realm }}"
        # description:
        #     - The realm to create the client in.
        # type: str
        # default: master

    client_id: "{{ keycloak_client.client_id | default(omit) }}"
        # description:
        #     - Client id of client to be worked on. This is usually an alphanumeric name chosen by
        #       you. Either this or O(id) is required. If you specify both, O(id) takes precedence.
        #       This is 'clientId' in the Keycloak REST API.
        # type: str

    id: "{{ keycloak_client.id | default(omit) }}"
        # description:
        #     - Id of client to be worked on. This is usually an UUID. Either this or O(client_id)
        #       is required. If you specify both, this takes precedence.
        # type: str

    name: "{{ keycloak_client.name }}"
        # description:
        #     - Name of the client (this is not the same as O(client_id)).
        # type: str

    description: "{{ keycloak_client.description | default(omit) }}"
        # description:
        #     - Description of the client in Keycloak.
        # type: str

    root_url: "{{ keycloak_client.root_url | default(omit) }}"
        # description:
        #     - Root URL appended to relative URLs for this client.
        #       This is 'rootUrl' in the Keycloak REST API.
        # type: str

    admin_url: "{{ keycloak_client.admin_url | default(omit) }}"
        # description:
        #     - URL to the admin interface of the client.
        #       This is 'adminUrl' in the Keycloak REST API.
        # type: str

    base_url: "{{ keycloak_client.base_url }}"
        # description:
        #     - Default URL to use when the auth server needs to redirect or link back to the client
        #       This is 'baseUrl' in the Keycloak REST API.
        # type: str

    enabled: "{{ keycloak_client.enabled | default(true) | bool }}"
        # description:
        #     - Is this client enabled or not?
        # type: bool

    client_authenticator_type: "{{ keycloak_client.client_authenticator_type | default(omit) }}"
        # description:
        #     - How do clients authenticate with the auth server? Either V(client-secret) or
        #       V(client-jwt) can be chosen. When using V(client-secret), the module parameter
        #       O(secret) can set it, while for V(client-jwt), you can use the keys C(use.jwks.url),
        #       C(jwks.url), and C(jwt.credential.certificate) in the O(attributes) module parameter
        #       to configure its behavior.
        #     - This is 'clientAuthenticatorType' in the Keycloak REST API.
        # choices: ['client-secret', 'client-jwt']
        # type: str

    secret: "{{ keycloak_client.secret | default(omit) }}"
        # description:
        #     - When using O(client_authenticator_type=client-secret) (the default), you can
        #       specify a secret here (otherwise one will be generated if it does not exit). If
        #       changing this secret, the module will not register a change currently (but the
        #       changed secret will be saved).
        # type: str

    registration_access_token: "{{ keycloak_client.registration_access_token | default(omit) }}"
        # description:
        #     - The registration access token provides access for clients to the client registration
        #       service.
        #       This is 'registrationAccessToken' in the Keycloak REST API.
        # type: str

    default_roles: "{{ keycloak_client.default_roles | default(omit) }}"
        # description:
        #     - list of default roles for this client. If the client roles referenced do not exist
        #       yet, they will be created.
        #       This is 'defaultRoles' in the Keycloak REST API.
        # type: list
        # elements: str

    redirect_uris: "{{ keycloak_client.redirect_uris }}"
        # description:
        #     - Acceptable redirect URIs for this client.
        #       This is 'redirectUris' in the Keycloak REST API.
        # type: list
        # elements: str

    web_origins: "{{ keycloak_client.web_origins  | default(omit)}}"
        # description:
        #     - List of allowed CORS origins.
        #       This is 'webOrigins' in the Keycloak REST API.
        # type: list
        # elements: str

    not_before: "{{ keycloak_client.not_before  | default(omit)}}"
        # description:
        #     - Revoke any tokens issued before this date for this client (this is a UNIX timestamp).
        #       This is 'notBefore' in the Keycloak REST API.
        # type: int
        # aliases:
        #     - notBefore

    bearer_only: "{{ keycloak_client.bearer_only  | default(omit)}}"
        # description:
        #     - The access type of this client is bearer-only.
        #       This is 'bearerOnly' in the Keycloak REST API.
        # type: bool

    consent_required: "{{ keycloak_client.consent_required | default(false) | bool }}"
        # description:
        #     - If enabled, users have to consent to client access.
        #       This is 'consentRequired' in the Keycloak REST API.
        # type: bool

    standard_flow_enabled: "{{ keycloak_client.standard_flow_enabled | default(omit) }}"
        # description:
        #     - Enable standard flow for this client or not (OpenID connect).
        #       This is 'standardFlowEnabled' in the Keycloak REST API.
        # type: bool

    implicit_flow_enabled: "{{ keycloak_client.implicit_flow_enabled | default(omit) }}"
        # description:
        #     - Enable implicit flow for this client or not (OpenID connect).
        #       This is 'implicitFlowEnabled' in the Keycloak REST API.
        # type: bool

    direct_access_grants_enabled: "{{ keycloak_client.direct_access_grants_enabled | default(omit) }}"
        # description:
        #     - Are direct access grants enabled for this client or not (OpenID connect).
        #       This is 'directAccessGrantsEnabled' in the Keycloak REST API.
        # type: bool

    service_accounts_enabled: "{{ keycloak_client.service_accounts_enabled | default(omit) }}"
        # description:
        #     - Are service accounts enabled for this client or not (OpenID connect).
        #       This is 'serviceAccountsEnabled' in the Keycloak REST API.
        # type: bool

    authorization_services_enabled: "{{ keycloak_client.authorization_services_enabled | default(omit) }}"
        # description:
        #     - Are authorization services enabled for this client or not (OpenID connect).
        #       This is 'authorizationServicesEnabled' in the Keycloak REST API.
        # type: bool

    public_client: "{{ keycloak_client.public_client | default(false) | bool }}"
        # description:
        #     - Is the access type for this client public or not.
        #       This is 'publicClient' in the Keycloak REST API.
        # type: bool

    frontchannel_logout: "{{ keycloak_client.frontchannel_logout | default(false) | bool }}"
        # description:
        #     - Is frontchannel logout enabled for this client or not.
        #       This is 'frontchannelLogout' in the Keycloak REST API.
        # type: bool

    protocol: "{{ keycloak_client.protocol | default('openid-connect') }}"
        # description:
        #     - Type of client.
        #     - At creation only, default value will be V(openid-connect) if O(protocol) is omitted.
        # type: str
        # choices: ['openid-connect', 'saml']

    full_scope_allowed: "{{ keycloak_client.full_scope_allowed  | default(omit) }}"
        # description:
        #     - Is the "Full Scope Allowed" feature set for this client or not.
        #       This is 'fullScopeAllowed' in the Keycloak REST API.
        # type: bool

    node_re_registration_timeout: "{{ keycloak_client.node_re_registration_timeout | default(omit) }}"
        # description:
        #     - Cluster node re-registration timeout for this client.
        #       This is 'nodeReRegistrationTimeout' in the Keycloak REST API.
        # type: int

    registered_nodes: "{{ keycloak_client.registered_nodes | default(omit) }}"
        # description:
        #     - dict of registered cluster nodes (with C(nodename) as the key and last registration
        #       time as the value).
        #       This is 'registeredNodes' in the Keycloak REST API.
        # type: dict

    client_template: "{{ keycloak_client.client_template | default(omit) }}"
        # description:
        #     - Client template to use for this client. If it does not exist this field will silently
        #       be dropped.
        #       This is 'clientTemplate' in the Keycloak REST API.
        # type: str

    use_template_config: "{{ keycloak_client.use_template_config | default(omit) }}"
        # description:
        #     - Whether or not to use configuration from the O(client_template).
        #       This is 'useTemplateConfig' in the Keycloak REST API.
        # type: bool

    use_template_scope: "{{ keycloak_client.use_template_scope | default(omit) }}"
        # description:
        #     - Whether or not to use scope configuration from the O(client_template).
        #       This is 'useTemplateScope' in the Keycloak REST API.
        # type: bool

    use_template_mappers: "{{ keycloak_client.use_template_mappers | default(omit) }}"
        # description:
        #     - Whether or not to use mapper configuration from the O(client_template).
        #       This is 'useTemplateMappers' in the Keycloak REST API.
        # type: bool

    always_display_in_console: "{{ keycloak_client.always_display_in_console | default(omit) }}"
        # description:
        #     - Whether or not to display this client in account console, even if the
        #       user does not have an active session.
        # type: bool

    surrogate_auth_required: "{{ keycloak_client.surrogate_auth_required | default(omit) }}"
        # description:
        #     - Whether or not surrogate auth is required.
        #       This is 'surrogateAuthRequired' in the Keycloak REST API.
        # type: bool

    authorization_settings: "{{ keycloak_client.authorization_settings | default(omit) }}"
        # description:
        #     - a data structure defining the authorization settings for this client. For reference,
        #       please see the Keycloak API docs at U(https://www.keycloak.org/docs-api/8.0/rest-api/index.html#_resourceserverrepresentation).
        #       This is 'authorizationSettings' in the Keycloak REST API.
        # type: dict

    authentication_flow_binding_overrides: "{{ keycloak_client.authentication_flow_binding_overrides | default(omit) }}"
        # description:
        #     - Override realm authentication flow bindings.
        # type: dict

    default_client_scopes: "{{ keycloak_client.default_client_scopes | default(omit) }}"
        # description:
        #     - List of default client scopes.
        # type: list
        # elements: str

    optional_client_scopes: "{{ keycloak_client.optional_client_scopes | default(omit) }}"
        # description:
        #     - List of optional client scopes.
        # type: list
        # elements: str

    protocol_mappers: "{{ keycloak_client.protocol_mappers | default(omit) }}"
        # description:
        #     - a list of dicts defining protocol mappers for this client.
        #       This is 'protocolMappers' in the Keycloak REST API.
        # aliases:
        #     - protocolMappers
        # type: list
        # elements: dict
        # suboptions:
        #     consentRequired:
        #         description:
        #             - Specifies whether a user needs to provide consent to a client for this mapper to be active.
        #         type: bool

        #     consentText:
        #         description:
        #             - The human-readable name of the consent the user is presented to accept.
        #         type: str

        #     id:
        #         description:
        #             - Usually a UUID specifying the internal ID of this protocol mapper instance.
        #         type: str

        #     name:
        #         description:
        #             - The name of this protocol mapper.
        #         type: str

        #     protocol:
        #         description:
        #             - This specifies for which protocol this protocol mapper is active.
        #         choices: ['openid-connect', 'saml']
        #         type: str

        #     protocolMapper:
        #         description:
        #             - "The Keycloak-internal name of the type of this protocol-mapper. While an exhaustive list is
        #               impossible to provide since this may be extended through SPIs by the user of Keycloak,
        #               by default Keycloak as of 3.4 ships with at least:"
        #             - V(docker-v2-allow-all-mapper)
        #             - V(oidc-address-mapper)
        #             - V(oidc-full-name-mapper)
        #             - V(oidc-group-membership-mapper)
        #             - V(oidc-hardcoded-claim-mapper)
        #             - V(oidc-hardcoded-role-mapper)
        #             - V(oidc-role-name-mapper)
        #             - V(oidc-script-based-protocol-mapper)
        #             - V(oidc-sha256-pairwise-sub-mapper)
        #             - V(oidc-usermodel-attribute-mapper)
        #             - V(oidc-usermodel-client-role-mapper)
        #             - V(oidc-usermodel-property-mapper)
        #             - V(oidc-usermodel-realm-role-mapper)
        #             - V(oidc-usersessionmodel-note-mapper)
        #             - V(saml-group-membership-mapper)
        #             - V(saml-hardcode-attribute-mapper)
        #             - V(saml-hardcode-role-mapper)
        #             - V(saml-role-list-mapper)
        #             - V(saml-role-name-mapper)
        #             - V(saml-user-attribute-mapper)
        #             - V(saml-user-property-mapper)
        #             - V(saml-user-session-note-mapper)
        #             - An exhaustive list of available mappers on your installation can be obtained on
        #               the admin console by going to Server Info -> Providers and looking under
        #               'protocol-mapper'.
        #         type: str

        #     config:
        #         description:
        #             - Dict specifying the configuration options for the protocol mapper; the
        #               contents differ depending on the value of O(protocol_mappers[].protocolMapper) and are not documented
        #               other than by the source of the mappers and its parent class(es). An example is given
        #               below. It is easiest to obtain valid config values by dumping an already-existing
        #               protocol mapper configuration through check-mode in the RV(existing) field.
        #         type: dict

    attributes: "{{ keycloak_client.attributes | default(omit) }}"
        # description:
        #     - A dict of further attributes for this client. This can contain various configuration
        #       settings; an example is given in the examples section. While an exhaustive list of
        #       permissible options is not available; possible options as of Keycloak 3.4 are listed below. The Keycloak
        #       API does not validate whether a given option is appropriate for the protocol used; if specified
        #       anyway, Keycloak will simply not use it.
        # type: dict
        # suboptions:
        #     saml.authnstatement:
        #         description:
        #             - For SAML clients, boolean specifying whether or not a statement containing method and timestamp
        #               should be included in the login response.

        #     saml.client.signature:
        #         description:
        #             - For SAML clients, boolean specifying whether a client signature is required and validated.

        #     saml.encrypt:
        #         description:
        #             - Boolean specifying whether SAML assertions should be encrypted with the client's public key.

        #     saml.force.post.binding:
        #         description:
        #             - For SAML clients, boolean specifying whether always to use POST binding for responses.

        #     saml.onetimeuse.condition:
        #         description:
        #             - For SAML clients, boolean specifying whether a OneTimeUse condition should be included in login responses.

        #     saml.server.signature:
        #         description:
        #             - Boolean specifying whether SAML documents should be signed by the realm.

        #     saml.server.signature.keyinfo.ext:
        #         description:
        #             - For SAML clients, boolean specifying whether REDIRECT signing key lookup should be optimized through inclusion
        #               of the signing key id in the SAML Extensions element.

        #     saml.signature.algorithm:
        #         description:
        #             - Signature algorithm used to sign SAML documents. One of V(RSA_SHA256), V(RSA_SHA1), V(RSA_SHA512), or V(DSA_SHA1).

        #     saml.signing.certificate:
        #         description:
        #             - SAML signing key certificate, base64-encoded.

        #     saml.signing.private.key:
        #         description:
        #             - SAML signing key private key, base64-encoded.

        #     saml_assertion_consumer_url_post:
        #         description:
        #             - SAML POST Binding URL for the client's assertion consumer service (login responses).

        #     saml_assertion_consumer_url_redirect:
        #         description:
        #             - SAML Redirect Binding URL for the client's assertion consumer service (login responses).


        #     saml_force_name_id_format:
        #         description:
        #             - For SAML clients, Boolean specifying whether to ignore requested NameID subject format and using the configured one instead.

        #     saml_name_id_format:
        #         description:
        #             - For SAML clients, the NameID format to use (one of V(username), V(email), V(transient), or V(persistent))

        #     saml_signature_canonicalization_method:
        #         description:
        #             - SAML signature canonicalization method. This is one of four values, namely
        #               V(http://www.w3.org/2001/10/xml-exc-c14n#) for EXCLUSIVE,
        #               V(http://www.w3.org/2001/10/xml-exc-c14n#WithComments) for EXCLUSIVE_WITH_COMMENTS,
        #               V(http://www.w3.org/TR/2001/REC-xml-c14n-20010315) for INCLUSIVE, and
        #               V(http://www.w3.org/TR/2001/REC-xml-c14n-20010315#WithComments) for INCLUSIVE_WITH_COMMENTS.

        #     saml_single_logout_service_url_post:
        #         description:
        #             - SAML POST binding url for the client's single logout service.

        #     saml_single_logout_service_url_redirect:
        #         description:
        #             - SAML redirect binding url for the client's single logout service.

        #     user.info.response.signature.alg:
        #         description:
        #             - For OpenID-Connect clients, JWA algorithm for signed UserInfo-endpoint responses. One of V(RS256) or V(unsigned).

        #     request.object.signature.alg:
        #         description:
        #             - For OpenID-Connect clients, JWA algorithm which the client needs to use when sending
        #               OIDC request object. One of V(any), V(none), V(RS256).

        #     use.jwks.url:
        #         description:
        #             - For OpenID-Connect clients, boolean specifying whether to use a JWKS URL to obtain client
        #               public keys.

        #     jwks.url:
        #         description:
        #             - For OpenID-Connect clients, URL where client keys in JWK are stored.

        #     jwt.credential.certificate:
        #         description:
        #             - For OpenID-Connect clients, client certificate for validating JWT issued by
        #               client and signed by its key, base64-encoded.
  diff: true

- name: Client Roles
  ansible.builtin.include_tasks:
    file: tasks/keycloak/role.yaml
  loop: "{{ keycloak_client.roles | default([]) }}"
  loop_control:
    loop_var: keycloak_role
