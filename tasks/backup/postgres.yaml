---

- name: Prepare Backup Filename
  ansible.builtin.set_fact:
    postgresdb_filename_backup: "{{ database.name }}.sql"
    directory_database_dump: "{{ directory_temp_destination }}/database-dump"


- name: Ensure no existing Database Dump Directory
  ansible.builtin.file:
    name: "{{ directory_database_dump }}"
    state: absent
  become: true
  delegate_to: |-
    {%- if database.delegate | default('') == 'localhost' -%}
      localhost
    {%- else -%}
      {{ inventory_hostname }}
    {%- endif %}


- name: Create Database Dump Directory
  ansible.builtin.file:
    name: "{{ directory_database_dump }}"
    state: directory
    owner: root
    group: backup
    mode: '770'
  become: true
  delegate_to: |-
    {%- if database.delegate | default('') == 'localhost' -%}
      localhost
    {%- else -%}
      {{ inventory_hostname }}
    {%- endif %}


- name: Dump an existing database to a file
  ansible.builtin.include_tasks:
    file: tasks/modules/community-postgresql-postgresql_db.yaml
    apply:
      tags:
        - always
  vars:
    task_name_module: Dump an existing database to a file - {{ database.name }}
    module_database:
      name: "{{ database.name }}"
      host: "{{ database.host | from_yaml }}"
      state: dump
      target: "{{ directory_database_dump }}/{{ postgresdb_filename_backup }}"
      delegate_to: |-
        {%- if database.delegate | default('') == 'localhost' -%}
          localhost
        {%- else -%}
          {{ inventory_hostname }}
        {%- endif %}


- name: Set Database Dump Permissions
  ansible.builtin.file:
    name: "{{ directory_database_dump }}/{{ postgresdb_filename_backup }}"
    owner: root
    group: backup
    mode: '0740'
    state: file
  become: true
  delegate_to: |-
    {%- if database.delegate | default('') == 'localhost' -%}
      localhost
    {%- else -%}
      {{ inventory_hostname }}
    {%- endif %}
