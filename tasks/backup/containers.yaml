---
#
# No Fuss Computing
# https://gitlab.com/nofusscomputing/projects/ansible/ansible_playbooks
#
# description:
#              Task file for backing up Specified paths to an archive.
#
# image: nofusscomputing/ansible-ee >= 0.1.0
# tags: nil
#
- name: Set Global Facts
  ansible.builtin.set_fact:
    filename_date_time: "{{ '%Y-%m-%d-%H:%M:%S-%z' | strftime }}"
  when: filename_date_time | default('does_not_exist') == 'does_not_exist'


- name: File Backup
  block:


    - name: Set Task Facts
      ansible.builtin.set_fact:
        file_backup_no_extension: "{{ filename_date_time }}-{{ container.name | replace(' ', '_') }}-{{ inventory_hostname }}"


    - name: Clean existing Temp Directory
      ansible.builtin.file:
        name: "{{ directory_temp_destination }}"
        state: absent
      become: true
      tags:
        - always


    - name: Create Temp Directory
      ansible.builtin.file:
        name: "{{ directory_temp_destination }}"
        state: directory
        owner: root
        group: backup
        mode: '770'
      become: true
      tags:
        - always


    - name: Backup Containers
      ansible.builtin.include_tasks:
        file: container.yaml
      loop: "{{ container.path | default([]) | list }}"
      loop_control:
        loop_var: container_path


    - name: Backup MariaDB/MySQL Database
      ansible.builtin.include_tasks:
        file: mariadb.yaml
      with_subelements:
        - "{{ container.databases | default([]) | list }}"
        - names
      vars:
        database:
          name: "{{ item[1] }}"
          type: "{{ item[0].type }}"
          method: "{{ item[0].method }}"
          encrypt: "{{ item[0].encrypt | default(true) | bool }}"
          socket: "{{ item[0].socket | default('') }}"
      when: >
        item[0].type == 'mariadb'
          or
        item[0].type == 'mysql'


    - name: Backup Postgres Database
      ansible.builtin.include_tasks:
        file: tasks/backup/postgres.yaml
      with_subelements:
        - "{{ container.databases | default([]) | list }}"
        - names
      vars:
        database:
          name: "{{ item[1] }}"
          type: "{{ item[0].type }}"
          encrypt: "{{ item[0].encrypt | default(true) | bool }}"
          host: "{{ item[0].host | default('') }}"
      when: item[0].type == 'postgres'


    - name: Create Metadata File
      ansible.builtin.include_tasks:
        file: tasks/backup/metadata.yaml


    - name: Encrypt Backup Contents
      ansible.builtin.include_tasks:
        file: encrypt_directory.yaml


    - name: Copy backup to Localhost
      ansible.builtin.fetch:
        src: "{{ directory_tasks }}/{{ file_backup_no_extension }}-{{ backup.encryption_algorithm }}.enc.tar.gz"
        dest: "/backup/"
        flat: true
      when: nfc_pb_copy_local | default(true) | bool


  always:


    - name: Clean Backup Data
      ansible.builtin.file:
        path: "{{ directory_temp_destination }}"
        state: absent
      become: true
