---

- name: MariaDB Backup
  block:


    - name: Prepare Backup Filename
      ansible.builtin.set_fact:
        file_backup_no_extension_mariadb: "{{ filename_date_time }}-mariadb-{{ database.name }}-{{ inventory_hostname }}"
        directory_database_dump: "{{ directory_temp_destination }}/database-dump"
        cacheable: false


    - name: Ensure no existing Database Dump Directory
      ansible.builtin.file:
        name: "{{ directory_database_dump }}"
        state: absent
      become: true


    - name: Create Database Dump Directory
      ansible.builtin.file:
        name: "{{ directory_database_dump }}"
        state: directory
        owner: root
        group: backup
        mode: '770'
      become: true


    - name: Dump of Database {{ database.name }}
      ansible.builtin.shell:
        cmd: |
          {% if database.method | default('nothing') == 'docker' -%}
            docker run \
              --rm \
              --name mysqldump-keycloak \
              -v {{ database.socket }}:/socket-mysqld/mysqld.sock \
              -v {{ directory_tasks }}:{{ directory_tasks }} \
            mariadb:10.6.14 \
          {%- endif %}
          mysqldump \
            --socket=
            {%- if database.method | default('nothing') == 'docker' -%}
              /socket-mysqld/mysqld.sock
            {%- else -%}
              {{ database.socket }}
            {%- endif %} \
            --quote-names \
            --protocol=socket \
            --user={{ nfc_pb_mariadb_username }} \
            --password={{ nfc_pb_mariadb_password }} \
            --lock-tables \
            --add-drop-database \
            --flush-privileges \
            --dump-date \
            {{ database.name }} \
          {% if database.encrypt | default(true) | bool -%}
            | openssl \
                smime -encrypt \
                -binary -text -{{ backup.encryption_algorithm }} \
                -out {{ directory_tasks }}/{{ file_backup_no_extension_mariadb }}-{{ backup.encryption_algorithm }}.sql.enc \
                -outform DER {{ directory_tasks }}/encryption_certificate;
            tar \
              --directory={{ directory_tasks }} \
              -czf {{ directory_tasks }}/{{ file_backup_no_extension_mariadb }}.tar.gz \
              {{ file_backup_no_extension_mariadb }}-{{ backup.encryption_algorithm }}.sql.enc;
              chown root:backup {{ file_backup_no_extension_mariadb }}-{{ backup.encryption_algorithm }}.sql.enc;
              chmod 0700 {{ file_backup_no_extension_mariadb }}-{{ backup.encryption_algorithm }}.sql.enc;
          {%- else -%}
            > {{ directory_database_dump }}/{{ database.name }}.sql;
          {%- endif %}
      args:
        executable: bash
      become: true
      register: mysql_backup
      failed_when: >
        't connect to local server' in mysql_backup.stderr
          or
        'Unable to' in mysql_backup.stderr
          or
        'could not' in mysql_backup.stderr
          or
        'Exiting with failure' in mysql_backup.stderr
          or
        'Unknown database' in mysql_backup.stderr


    - name: Set Database Dump Permissions
      ansible.builtin.file:
        name: |-
          {% if database.encrypt | default(true) | bool -%}
            {{ file_backup_no_extension_mariadb }}-{{ backup.encryption_algorithm }}.sql.enc
          {%- else -%}
            {{ directory_database_dump }}/{{ database.name }}.sql
          {%- endif %}
        owner: root
        group: backup
        mode: '0740'
        state: file
      become: true


  rescue:


    - name: Remove Failed Backup
      ansible.builtin.file:
        name: "{{ item }}"
        state: absent
      become: true
      loop: "{{ tmp_files }}"
      vars:
        tmp_files:
          - "{{ directory_tasks }}/{{ file_backup_no_extension_mariadb }}.tar.gz"
          - "{{ file_backup_no_extension_mariadb }}-{{ backup.encryption_algorithm }}.sql.enc"


    - name: Task Failed Force Kill Play
      ansible.builtin.assert:
        that:
          - false
        msg: "The Play Failed"
