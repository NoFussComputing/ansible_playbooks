---

- name: Confirm required variables exist
  ansible.builtin.assert:
    that:
      - postgresql_db_name is defined
    msg: A Database name must be supplied
  when: postgresql_db.name is not defined


- name: Create Variable
  ansible.builtin.set_fact:
    postgresql_db: "{{ postgresql_db | default({}) | combine({
        'name': postgresql_db_name
      }) }}"
  when: postgresql_db.name is not defined


- name: Create Postgres Database
  community.postgresql.postgresql_db:
    login_host: "{{ postgresdb_host }}"
    login_user: "{{ postgresdb_user }}"
    login_password: "{{ postgresdb_password }}"

    name: "{{ postgresql_db.name }}"
      # description:
      #   - Name of the database to add or remove.
      # type: str
      # required: true
    owner: "{{ postgresql_db.owner | default(omit) }}"
      # description:
      #   - Name of the role to set as owner of the database.
      # type: str
      # default: ''
    template: "{{ postgresql_db.template | default(omit) }}"
      # description:
      #   - Template used to create the database.
      # type: str
      # default: ''
    encoding: "{{ postgresql_db.encoding | default(omit) }}"
      # description:
      #   - Encoding of the database.
      # type: str
      # default: ''
    lc_collate: "{{ postgresql_db.lc_collate | default(omit) }}"
      # description:
      #   - Collation order (LC_COLLATE) to use in the database
      #     must match collation order of template database unless C(template0) is used as template.
      # type: str
      # default: ''
    lc_ctype: "{{ postgresql_db.lc_ctype | default(omit) }}"
      # description:
      #   - Character classification (LC_CTYPE) to use in the database (e.g. lower, upper, ...).
      #   - Must match LC_CTYPE of template database unless C(template0) is used as template.
      # type: str
      # default: ''
    session_role: "{{ postgresql_db.session_role | default(omit) }}"
      # description:
      # - Switch to session_role after connecting.
      # - The specified session_role must be a role that the current login_user is a member of.
      # - Permissions checking for SQL commands is carried out as though the session_role
      #   were the one that had logged in originally.
      # type: str
    state: "{{ postgresql_db.state | default('present') }}"
      # description:
      # - The database state.
      # - C(present) implies that the database should be created if necessary.
      # - C(absent) implies that the database should be removed if present.
      # - C(dump) requires a target definition to which the database will be backed up. (Added in Ansible 2.4)
      #   Note that in some PostgreSQL versions of pg_dump, which is an embedded PostgreSQL utility and is used by the module,
      #   returns rc 0 even when errors occurred (e.g. the connection is forbidden by pg_hba.conf, etc.),
      #   so the module returns changed=True but the dump has not actually been done. Please, be sure that your version of
      #   pg_dump returns rc 1 in this case.
      # - C(restore) also requires a target definition from which the database will be restored. (Added in Ansible 2.4).
      # - The format of the backup will be detected based on the target name.
      # - Supported compression formats for dump and restore determined by target file format C(.pgc) (custom), C(.bz2) (bzip2), C(.gz) (gzip/pigz) and C(.xz) (xz).
      # - Supported formats for dump and restore determined by target file format C(.sql) (plain), C(.tar) (tar), C(.pgc) (custom) and C(.dir) (directory)
      #   For the directory format which is supported since collection version 1.4.0.
      # - "Restore program is selected by target file format: C(.tar), C(.pgc), and C(.dir) are handled by pg_restore, other with pgsql."
      # - "."
      # - C(rename) is used to rename the database C(name) to C(target).
      # - If the database C(name) exists, it will be renamed to C(target).
      # - If the database C(name) does not exist and the C(target) database exists,
      #   the module will report that nothing has changed.
      # - If both the databases exist as well as when they have the same value, an error will be raised.
      # - When I(state=rename), in addition to the C(name) option, the module requires the C(target) option. Other options are ignored.
      #   Supported since collection version 1.4.0.
      # type: str
      # choices: [ absent, dump, present, rename, restore ]
      # default: present
    force: "{{ postgresql_db.force | default(omit) }}"
      # description:
      # - Used to forcefully drop a database when the I(state) is C(absent), ignored otherwise.
      # type: bool
      # default: False
    target: "{{ postgresql_db.target | default(omit) }}"
      # description:
      # - File to back up or restore from.
      # - Used when I(state) is C(dump) or C(restore).
      # type: path
      # default: ''
    target_opts: "{{ postgresql_db.target_opts | default(omit) }}"
      # description:
      # - Additional arguments for pg_dump or restore program (pg_restore or psql, depending on target's format).
      # - Used when I(state) is C(dump) or C(restore).
      # type: str
      # default: ''
    maintenance_db: "{{ postgresql_db.maintenance_db | default(omit) }}"
      # description:
      #   - The value specifies the initial database (which is also called as maintenance DB) that Ansible connects to.
      # type: str
      # default: postgres
    conn_limit: "{{ postgresql_db.conn_limit | default(omit) }}"
      # description:
      #   - Specifies the database connection limit.
      # type: str
      # default: ''
    tablespace: "{{ postgresql_db.tablespace | default(omit) }}"
      # description:
      #   - The tablespace to set for the database
      #     U(https://www.postgresql.org/docs/current/sql-alterdatabase.html).
      #   - If you want to move the database back to the default tablespace,
      #     explicitly set this to pg_default.
      # type: path
      # default: ''
    dump_extra_args: "{{ postgresql_db.dump_extra_args | default(omit) }}"
      # description:
      #   - Provides additional arguments when I(state) is C(dump).
      #   - Cannot be used with dump-file-format-related arguments like ``--format=d``.
      # type: str
    trust_input: "{{ postgresql_db.trust_input | default(omit) }}"
      # description:
      # - If C(false), check whether values of parameters I(owner), I(conn_limit), I(encoding),
      #   I(db), I(template), I(tablespace), I(session_role) are potentially dangerous.
      # - It makes sense to use C(false) only when SQL injections via the parameters are possible.
      # type: bool
      # default: true
