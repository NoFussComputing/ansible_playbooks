---
- name: AWX / Tower Setup
  hosts: localhost
  become: false
  gather_facts: true


  pre_tasks:


      # Play and task set time
    - name: Set Start Time
      ansible.builtin.set_fact:
        nfc_task_starttime: "{{ ('%Y-%m-%dT%H:%M:%S %z' | strftime) | string }}"
      no_log: "{{ nfc_pb_no_log_setup_facts | default(true) | bool }}"
      when: nfc_automation is not defined
      tags:
        - always


    # Setup dictionary 'nfc_automation'
    - name: Set Automation Facts
      ansible.builtin.set_fact:
        nfc_automation: {
          "error": 0,
          "time": {
            "start": "{{ nfc_task_starttime | string }}",
            "end": 0
          }
        }
      no_log: "{{ nfc_pb_no_log_setup_facts | default(true) | bool }}"
      when: nfc_automation is not defined
      tags:
        - always


    # Setup dictionary 'nfc_task'
    - name: Set Automation Facts
      ansible.builtin.set_fact:
        nfc_task: {
          "name": "{{ ansible_play_name | lower | string }}",
          "roles": "{{ ansible_play_role_names | string }}",
          "skip_tags": "{{ ansible_skip_tags | list }}",
          "start": "{{ nfc_task_starttime | string }}",
          "tags": "{{ ansible_run_tags | list }}"
        }
      no_log: "{{ nfc_pb_no_log_setup_facts | default(true) | bool }}"
      tags:
        - always


    - name: Block - pre_tasks
      block:


        ################################################
        - name: Trace
          ansible.builtin.debug:
            msg: "this task exists as you can't have an empty block"


      rescue:

          # there was an error, set error object
        - name: Set error fact
          ansible.builtin.set_fact:
            nfc_automation: "{{ nfc_automation | combine({
                'error': 1
              }) }}"
          no_log: "{{ nfc_pb_no_log_setup_facts | default(true) | bool }}"
          tags:
            - always


      always:


          # Check if error occured and fail task
        - name: Error Check
          ansible.builtin.assert:
            that:
              - nfc_automation.error | int == 0
            msg: Error occured, Fail the play run
          tags:
            - always


    # Don't use the 'roles' section.
  roles: []
    # if the included role(s) do not contain a rescue block, the playbook may stop
    # executing in this section (roles) with the post_tasks not running. This will
    # cause the artifacts to be incomplete. It's recommended to include your roles
    # in section(s) 'pre_tasks', 'tasks' or 'post_tasks' and from within a block with
   # rescue so that the playbook can complete and ensure that all artifacts are set.


  tasks:


    - name: Block - tasks
      block:

          # Check for error and fail play on error
        - name: Error Check
          ansible.builtin.assert:
            that:
              - nfc_automation.error | int == 0
            msg: Error eccured, follow error path to fail play


        - name: Configure AWX
          ansible.builtin.include_tasks:
            file: tasks/awx/settings.yaml


        - name: Credential Types
          ansible.builtin.include_tasks:
            file: tasks/awx/credential_type.yaml
          loop: "{{ my_awx_config.credential_types | default([]) | list }}" # Fix as this var should be dynamic
          loop_control:
            loop_var: nfc_pb_awx_credential_type


        - name: Instances
          ansible.builtin.include_tasks:
            file: tasks/awx/instances.yaml
          loop: "{{ my_awx_config.instances | default([]) | list }}" # Fix as this var should be dynamic
          loop_control:
            loop_var: nfc_pb_awx_instance


        - name: Instance Groups
          ansible.builtin.include_tasks:
            file: tasks/awx/instance_group.yaml
          loop: "{{ my_awx_config.instance_groups | default([]) | list }}" # Fix as this var should be dynamic
          loop_control:
            loop_var: nfc_pb_awx_instance_group


        - name: Organizations
          ansible.builtin.include_tasks:
            file: tasks/awx/organization.yaml
          loop: "{{ my_awx_config.organizations | default([]) | list }}" # Fix as this var should be dynamic
          loop_control:
            loop_var: nfc_pb_awx_organization


      rescue:


          # there was an error, set error object
        - name: Set error fact
          ansible.builtin.set_fact:
            nfc_automation: "{{ nfc_automation | combine({
                'error': 1
              }) }}"
          no_log: "{{ nfc_pb_no_log_setup_facts | default(true) | bool }}"
          tags:
            - always


      always:


          # Check if error occured and fail task
        - name: Error Check
          ansible.builtin.assert:
            that:
              - nfc_automation.error | int == 0
            msg: Error occured, Fail the play run
          tags:
            - always


  post_tasks:

    - name: Tasks post_task
      block:


          # Check for error and fail play on error
        - name: Error Check
          ansible.builtin.assert:
            that:
              - nfc_automation.error | int == 0
            msg: Error occured, follow error path to fail play
          tags:
            - always


        ########################################################################
        #
        # Your tasks here
        #
        ########################################################################


      rescue:


          # there was an error, set error object
        - name: Set error fact
          ansible.builtin.set_fact:
            nfc_automation: "{{ nfc_automation | combine({
                'error': 1
              }) }}"
          no_log: "{{ nfc_pb_no_log_setup_facts | default(true) | bool }}"
          tags:
            - always


      always:


          # Task and automation end time.
        - name: Fetch End time
          ansible.builtin.set_fact:
            nfc_task_endtime: "{{ '%Y-%m-%dT%H:%M:%S %z' | strftime }}"
          no_log: "{{ nfc_pb_no_log_setup_facts | default(true) | bool }}"
          tags:
            - always


          # Set task end time
        - name: Set task Facts
          ansible.builtin.set_fact:
            nfc_tasks: "{{ nfc_tasks | default([]) + [ nfc_task | combine({
                'end': nfc_task_endtime | string
              }) ] }}"
          no_log: "{{ nfc_pb_no_log_setup_facts | default(true) | bool }}"
          tags:
            - always


          # Set Automation end time.
          # every playbook must set this variable so that the end time
          # is equal to the fail time or the end of a group of playbooks.
        - name: Set automation end time
          ansible.builtin.set_fact:
            nfc_automation: "{{ nfc_automation | combine({
                'time': nfc_automation.time | combine({
                  'end': nfc_task_endtime | string
                })
              }) }}"
            nfc_task_endtime: null
          no_log: "{{ nfc_pb_no_log_setup_facts | default(true) | bool }}"
          tags:
            - always


          # Set the artifacts as a fact for subsequent playbook useage
          # Note: variable 'per_host' must be 'false' so that the artifacts
          # work within AWX / Ansible Automation Platform.
        - name: Create Automation Artifact
          ansible.builtin.set_stats:
            data:
              nfc_automation: "{{ nfc_automation }}"
              nfc_tasks: "{{ nfc_tasks }}"
            per_host: false
          tags:
            - always


          # Final error check to fail the entire play run on error
        - name: Error Check
          ansible.builtin.assert:
            that:
              - nfc_automation.error | int == 0
            msg: Error occured, Fail the play run
          tags:
            - always




  vars:

    ansible_connection: local

    nfc_pb_awx_tower_template:

      - name: "AWX / Tower Configure"
        ask_tags_on_launch: false
        ask_inventory_on_launch: true
        ask_credential_on_launch: true
        description: Configure AWX from Inventory
        execution_environment: "No Fuss Computing EE"
        job_type: "run"
        labels:
          - awx
          - configure
        # credentials:
        #   - "Local"
        verbosity: 2
        use_fact_cache: true
        survey_enabled: true
        survey_spec: |
          {
            "name": "",
            "spec": [
              {
                "max": 1024,
                "min": 3,
                "type": "text",
                "choices": "",
                "default": "my_awx_config",
                "required": true,
                "variable": "nfc_pb_awx_config_variable",
                "new_question": true,
                "question_name": "Inventory Variable",
                "question_description": "The Variable in the Inventory the AWX config is under"
              }
            ],
            "description": ""
          }
        credential_types:
          - name: Git Credentials
            description: Creates ~/gitconfig with credentials that enable git operations on a private repository
            inputs: |
              fields:
                - id: username
                  type: string
                  label: GIT Username
                - id: url
                  type: string
                  label: GIT URL
                  help_text: Ensure that `https://` is prefixed to url
                - id: token
                  type: string
                  label: GIT Token
                  secret: true
              required:
                - username
                - url
                - token
            injectors: >
              file:
                template.git_credential_file: |
                  [credential "{{ url }}"]
                      username = {{ username }}
                      helper = "!f() { test \"$1\" = get && echo \"password={{ token }}\"; }; f"
              extra_vars:
                tower:
                  filename:
                    git_credential_file: "{{ tower.filename.git_credential_file }}"


#################################################################################################################################

    # #
    # # required pip modules pytz, python-dateutil
    # #
    # - name: Schedule configuration
    #   awx.awx.schedule:
    #     controller_host: "{{ nfc_pb_awx_controller_host | default(omit) }}"
    #     controller_oauthtoken: "{{ nfc_pb_awx_controller_oauthtoken | default(omit) }}"
    #     controller_username: "{{ nfc_pb_awx_controller_username | default(omit) }}"
    #     controller_password: "{{ nfc_pb_awx_controller_password | default(omit) }}"
    #     name: "{{ item[1].name }}"
    #     state: "{{ item[1].state | default('present') }}"
    #     scm_branch: "{{ item[1].scm_branch | default(omit) }}"
    #     unified_job_template: "{{ item[1].template }}"
    #     job_tags: "{{ item[1].job_tags | default(omit) }}"
    #     job_type: "{{ item[1].job_type }}"
    #     rrule: "{{ query('awx.awx.schedule_rrule', item[1].schedule.terms, every=item[1].schedule.every, timezone=item[1].schedule.timezone) }}" # "{{ item[1].schedule }}"
    #   with_subelements:
    #     - "{{ nfc_pb_awx_config.organizations }}"
    #     - schedules
    #   # no_log: true
    #   diff: true
    #   tags:
    #     - schedule
