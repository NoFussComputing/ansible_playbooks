---
#
# No Fuss Computing
# https://gitlab.com/nofusscomputing/projects/ansible/ansible_playbooks
#
# Playbook for Backing up various systems.
# tags are optional, with each task only running if applicable variabls are set.
#
# image: nofusscomputing/ansible-ee >= 0.3.0
#
# Tags:
#
#   - files
#     Backup Specified files to archive
#
#   - mariadb
#     Backup Mariadb/MySQL Database
#
#   - postgres
#     backup PostgresDB Database
#
- name: Conduct Backup
  hosts: all
  gather_facts: false


  pre_tasks:


      # Play and task set time
    - name: Set Start Time
      ansible.builtin.set_fact:
        nfc_task_starttime: "{{ ('%Y-%m-%dT%H:%M:%S %z' | strftime) | string }}"
      no_log: "{{ nfc_pb_no_log_setup_facts | default(false) | bool }}"
      tags:
        - always


    # Setup dictionary 'nfc_automation'
    - name: Set Automation Facts
      ansible.builtin.set_fact:
        nfc_automation: {
          "time": {
            "start": "{{ nfc_task_starttime | string }}",
            "end": 0
          }
        }
      no_log: "{{ nfc_pb_no_log_setup_facts | default(false) | bool }}"
      when: nfc_automation is not defined
      tags:
        - always


    # Setup dictionary 'nfc_task'
    - name: Set Automation Facts
      ansible.builtin.set_fact:
        nfc_task: {
          "name": "{{ ansible_play_name | default('') | lower | string }}",
          "error": 0,
          "roles": "{{ ansible_play_role_names | default('') | string }}",
          "skip_tags": "{{ ansible_skip_tags | default([])| list }}",
          "start": "{{ nfc_task_starttime | string }}",
          "tags": "{{ ansible_run_tags | default([]) | list }}"
        }
      no_log: "{{ nfc_pb_no_log_setup_facts | default(false) | bool }}"
      tags:
        - always


    - name: Block - pre_tasks
      block:


        - name: Variable Setup - project_dir
          ansible.builtin.include_tasks:
            file: tasks/var_project_dir.yaml
            apply:
              tags:
                - always
          when: var_project_dir is not defined
          tags:
            - always


      rescue:

          # there was an error, set error object
        - name: Set error fact
          ansible.builtin.set_fact:
            nfc_task: "{{ nfc_task | combine({
                'error': 1
              }) }}"
          no_log: "{{ nfc_pb_no_log_setup_facts | default(false) | bool }}"
          tags:
            - always


      always:


          # Check if error occured and fail task
        - name: Error Check
          ansible.builtin.assert:
            that:
              - nfc_task.error | int == 0
            msg: Error occured, Fail the play run
          tags:
            - always


    # Don't use the 'roles' section.
  roles: []
    # if the included role(s) do not contain a rescue block, the playbook may stop
    # executing in this section (roles) with the post_tasks not running. This will
    # cause the artifacts to be incomplete. It's recommended to include your roles
    # in section(s) 'pre_tasks', 'tasks' or 'post_tasks' and from within a block with
   # rescue so that the playbook can complete and ensure that all artifacts are set.


  tasks:


    - name: Block - tasks
      block:

          # Check for error and fail play on error
        - name: Error Check
          ansible.builtin.assert:
            that:
              - nfc_task.error | int == 0
            msg: Error eccured, follow error path to fail play
          tags:
            - always


        - name: Conduct Backup
          ansible.builtin.include_tasks:
            file: tasks/backup.yaml
          tags:
            - always


      rescue:


          # there was an error, set error object
        - name: Set error fact
          ansible.builtin.set_fact:
            nfc_task: "{{ nfc_task | combine({
                'error': 1
              }) }}"
          no_log: "{{ nfc_pb_no_log_setup_facts | default(false) | bool }}"
          tags:
            - always


      always:


          # Check if error occured and fail task
        - name: Error Check
          ansible.builtin.assert:
            that:
              - nfc_task.error | int == 0
            msg: Error occured, Fail the play run
          tags:
            - always


  post_tasks:

    - name: Tasks post_task
      block:


          # Check for error and fail play on error
        - name: Error Check
          ansible.builtin.assert:
            that:
              - nfc_task.error | int == 0
            msg: Error occured, follow error path to fail play
          tags:
            - always


        ########################################################################
        #
        # Your tasks here
        #
        ########################################################################


      rescue:


          # there was an error, set error object
        - name: Set error fact
          ansible.builtin.set_fact:
            nfc_task: "{{ nfc_task | combine({
                'error': 1
              }) }}"
          no_log: "{{ nfc_pb_no_log_setup_facts | default(false) | bool }}"
          tags:
            - always


      always:


          # Task and automation end time.
        - name: Fetch End time
          ansible.builtin.set_fact:
            nfc_task_endtime: "{{ '%Y-%m-%dT%H:%M:%S %z' | strftime }}"
          no_log: "{{ nfc_pb_no_log_setup_facts | default(false) | bool }}"
          tags:
            - always


          # Set task end time
        - name: Set task Facts
          ansible.builtin.set_fact:
            nfc_tasks: "{{ nfc_tasks | default([]) + [ nfc_task | combine({
                'end': nfc_task_endtime | string
              }) ] }}"
          no_log: "{{ nfc_pb_no_log_setup_facts | default(false) | bool }}"
          tags:
            - always


          # Set Automation end time.
          # every playbook must set this variable so that the end time
          # is equal to the fail time or the end of a group of playbooks.
        - name: Set automation end time
          ansible.builtin.set_fact:
            nfc_automation: "{{ nfc_automation | combine({
                'time': nfc_automation.time | combine({
                  'end': nfc_task_endtime | string
                })
              }) }}"
            nfc_task_endtime: null
          no_log: "{{ nfc_pb_no_log_setup_facts | default(false) | bool }}"
          tags:
            - always


          # Set the artifacts as a fact for subsequent playbook useage
          # Note: variable 'per_host' must be 'false' so that the artifacts
          # work within AWX / Ansible Automation Platform.
        - name: Create Automation Artifact
          ansible.builtin.set_stats:
            data:
              nfc_automation: "{{ nfc_automation }}"
              nfc_tasks: "{{ nfc_tasks }}"
            per_host: false
          tags:
            - always


          # Final error check to fail the entire play run on error 
        - name: Error Check
          ansible.builtin.assert:
            that:
              - nfc_task.error | int == 0
            msg: Error occured, Fail the play run
          tags:
            - always


  vars:


    nfc_pb_awx_tower_template:


      - name: "Backup(s) from Inventory config"
        ask_limit_on_launch: true
        ask_tags_on_launch: true
        ask_credential_on_launch: true
        ask_variables_on_launch: true
        description: |
          Playbook to backup various systems using config within inventory
          Available tags:
            'files' Backup Specified files Database,
            'mariadb' Backup a MariaDB Database,
            'postgresdb' Backup a postgres Database.
          If no tag is specified, all tasks will run if the applicable variables are set.
        execution_environment: "No Fuss Computing EE"
        forks: 3
        job_type: "run"
        job_tags: files, mariadb, postgresdb
        labels:
          - backup
          - files
          - mariadb
          - postgres
        # credentials:
        #   - "Local"
        verbosity: 2
        use_fact_cache: true

      - name: "Backup/Application"
        ask_limit_on_launch: true
        ask_tags_on_launch: false
        ask_credential_on_launch: true
        ask_variables_on_launch: true
        description: |
          Playbook to backup an Installed Application
        execution_environment: "No Fuss Computing EE"
        extra_vars: |
          encryption_algorithm: aes256                   # Encryption algorithm
          applications:
            - name: glpi                                 # Mandatory, String. Name of the Application
              type: docker                               # Mandatory. choice=docker|kube. Container engine type
              container: glpi                            # Mandatory. String. Name of the container to backup.
              path:                                      # Mandatory. List of String. Path within the container to backup
                - /var/www/html/config
                - /var/www/html/files
                - /var/log
                - /var/www/html/marketplace
                - /var/www/html/plugins
              databases:
                - names:                                 # Mandatory. List of String. name(s) of database to backup
                    - glpi
                  type: mariadb                          # Mandatory, choice=mariadb|mysql|postgres
                  method: docker                         # Optional, choice=docker|direct. default=direct specify the method to backup the database
                  encrypt: false                         # Optional, Boolean. default=true. Encrypt the database backup
                  socket: /var/run/mysqld/mysqld.sock    # Mandatory. String. Path to the MySQL socket.
        forks: 3
        job_type: "run"
        job_tags: application
        labels:
          - backup
          - container
          - files
          - mariadb
          - postgres
        # credentials:
        #   - "Local"
        verbosity: 2
        use_fact_cache: true


      - name: "Backup/Inventory"
        ask_limit_on_launch: true
        ask_tags_on_launch: false
        ask_credential_on_launch: true
        ask_variables_on_launch: false
        description: |
          Playbook to backup an Installed Application using inventory Variables
        execution_environment: "No Fuss Computing EE"
        forks: 3
        job_type: "run"
        job_tags: application
        labels:
          - backup
          - container
          - files
          - mariadb
          - postgres
        verbosity: 2
        use_fact_cache: true
        credential_types:
          - name: playbook/mariadb/login
            description: A Credential type for No Fuss Computings Playbooks for MariaDB/MySQL login credentials
            inputs: |
              fields:
                - id: username
                  type: string
                  label: User Name
                  secret: false
                - id: password
                  type: string
                  label: Password
                  secret: true
              required:
                - host
                - app_token
                - user_token
            injectors: >
              extra_vars:
                nfc_pb_mariadb_username: '{{ username }}'
                nfc_pb_mariadb_password: '{{ password }}'
